/* Generated By:JavaCC: Do not edit this line. gramaticaConstants.java */
package sintactico;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface gramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM = 5;
  /** RegularExpression Id. */
  int LBRACE = 6;
  /** RegularExpression Id. */
  int RBRACE = 7;
  /** RegularExpression Id. */
  int LBRACKET = 8;
  /** RegularExpression Id. */
  int RBRACKET = 9;
  /** RegularExpression Id. */
  int LPAREN = 10;
  /** RegularExpression Id. */
  int RPAREN = 11;
  /** RegularExpression Id. */
  int SEMICOLON = 12;
  /** RegularExpression Id. */
  int COMMA = 13;
  /** RegularExpression Id. */
  int ASSIGN = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int EQ = 17;
  /** RegularExpression Id. */
  int NEQ = 18;
  /** RegularExpression Id. */
  int LT = 19;
  /** RegularExpression Id. */
  int LTE = 20;
  /** RegularExpression Id. */
  int GT = 21;
  /** RegularExpression Id. */
  int GTE = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int ASTERISK = 25;
  /** RegularExpression Id. */
  int SLASH = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int IF = 28;
  /** RegularExpression Id. */
  int FI = 29;
  /** RegularExpression Id. */
  int ELSE = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int DO = 32;
  /** RegularExpression Id. */
  int UNTIL = 33;
  /** RegularExpression Id. */
  int READ = 34;
  /** RegularExpression Id. */
  int WRITE = 35;
  /** RegularExpression Id. */
  int BREAK = 36;
  /** RegularExpression Id. */
  int INT = 37;
  /** RegularExpression Id. */
  int FLOAT = 38;
  /** RegularExpression Id. */
  int BOOL = 39;
  /** RegularExpression Id. */
  int TRUE = 40;
  /** RegularExpression Id. */
  int FALSE = 41;
  /** RegularExpression Id. */
  int THEN = 42;
  /** RegularExpression Id. */
  int ID = 43;
  /** RegularExpression Id. */
  int INTEGER = 44;
  /** RegularExpression Id. */
  int REAL = 45;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"program\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\"or\"",
    "\"and\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"not\"",
    "\"if\"",
    "\"fi\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"until\"",
    "\"read\"",
    "\"write\"",
    "\"break\"",
    "\"int\"",
    "\"float\"",
    "\"bool\"",
    "\"true\"",
    "\"false\"",
    "\"then\"",
    "<ID>",
    "<INTEGER>",
    "<REAL>",
    "\"/*\"",
    "<token of kind 47>",
    "\"*/\"",
  };

}
