/* Gramatica.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Gramatica.java */
package sintactico;

public class Gramatica/*@bgen(jjtree)*/implements GramaticaTreeConstants, GramaticaConstants {/*@bgen(jjtree)*/
  protected JJTGramaticaState jjtree = new JJTGramaticaState();public static void main(String [] args) throws ParseException {
        Gramatica analizador = new Gramatica(System.in);
        SimpleNode root = analizador.program();
        //root.dump("");
    }

  final public SimpleNode program() throws ParseException {/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PROGRAM);
      lbrace();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case FLOAT:
        case BOOL:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        lista_decl();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case DO:
        case READ:
        case WRITE:
        case BREAK:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        lista_sent();
      }
      rbrace();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void lista_decl() throws ParseException {/*@bgen(jjtree) lista_decl */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl();
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void decl() throws ParseException {/*@bgen(jjtree) decl */
    SimpleNode jjtn000 = new SimpleNode(JJTDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type = "";
    try {
      type = tipo();
      lista_id(type);
      semicolon();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String tipo() throws ParseException {/*@bgen(jjtree) tipo */
    SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String type = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        type = intToken();
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
{if ("" != null) return type;}
        break;
        }
      case FLOAT:{
        type = floatToken();
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
{if ("" != null) return type;}
        break;
        }
      case BOOL:{
        type = boolToken();
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
{if ("" != null) return type;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void lista_id(String type) throws ParseException {/*@bgen(jjtree) lista_id */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      idDecl(type);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        comma();
        idDecl(type);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void lista_sent() throws ParseException {/*@bgen(jjtree) lista_sent */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_SENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      sent();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void sent() throws ParseException {/*@bgen(jjtree) sent */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        sent_if();
        break;
        }
      case WHILE:{
        sent_while();
        break;
        }
      case DO:{
        sent_do();
        break;
        }
      case READ:{
        sent_read();
        break;
        }
      case WRITE:{
        sent_write();
        break;
        }
      case LBRACE:{
        bloque();
        break;
        }
      case ID:{
        sent_assign();
        break;
        }
      case BREAK:{
        breakToken();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                   jjtree.clearNodeScope(jjtn000);
                   jjtc000 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte000 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte000;}
                 }
                 if (jjte000 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte000;}
                 }
                 {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
    }
  }

  final public void sent_if() throws ParseException {/*@bgen(jjtree) sent_if */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ifToken();
      lparen();
      exp_bool();
      rparen();
      then();
      bloque();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        elseToken();
        bloque();
      }
      fi();
    } catch (Throwable jjte000) {
if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void sent_while() throws ParseException {/*@bgen(jjtree) sent_while */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      whileToken();
      lparen();
      exp_bool();
      rparen();
      bloque();
    } catch (Throwable jjte000) {
if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void sent_do() throws ParseException {/*@bgen(jjtree) sent_do */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_DO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      doToken();
      bloque();
      jj_consume_token(UNTIL);
      lparen();
      exp_bool();
      rparen();
      semicolon();
    } catch (Throwable jjte000) {
if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte000;}
                     }
                     if (jjte000 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte000;}
                     }
                     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
    }
  }

  final public void sent_read() throws ParseException {/*@bgen(jjtree) sent_read */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_READ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      read();
      id();
      semicolon();
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void sent_write() throws ParseException {/*@bgen(jjtree) sent_write */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_WRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      write();
      id();
      semicolon();
    } catch (Throwable jjte000) {
if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void bloque() throws ParseException {/*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      lbrace();
      lista_sent();
      rbrace();
    } catch (Throwable jjte000) {
if (jjtc000) {
                      jjtree.clearNodeScope(jjtn000);
                      jjtc000 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte000 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte000;}
                    }
                    if (jjte000 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte000;}
                    }
                    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  final public void sent_assign() throws ParseException {/*@bgen(jjtree) sent_assign */
    SimpleNode jjtn000 = new SimpleNode(JJTSENT_ASSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String identifier="";
    SymbolNode tempVar = null;
    try {
      identifier = idAssign();
      assign();
      tempVar = exp_bool();
      semicolon();
jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
if(SymTable.Contains(identifier)){
            SymbolNode id = SymTable.GetIndex(identifier);
            if(id.type == tempVar.type){
                SymTable.UpdateIndex(identifier, tempVar);
            }else {//error, tipos de datos diferentes
            }
        }else{} //error, variable no declarada

    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public SymbolNode exp_bool() throws ParseException {/*@bgen(jjtree) exp_bool */
    SimpleNode jjtn000 = new SimpleNode(JJTEXP_BOOL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    try {
      acum1 = comb();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        or();
        comb();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode comb() throws ParseException {/*@bgen(jjtree) comb */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    try {
      acum1 = igualdad();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        and();
        igualdad();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode igualdad() throws ParseException {/*@bgen(jjtree) igualdad */
    SimpleNode jjtn000 = new SimpleNode(JJTIGUALDAD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    try {
      acum1 = rel();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NEQ:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          eq();
          break;
          }
        case NEQ:{
          neq();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rel();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode rel() throws ParseException {/*@bgen(jjtree) rel */
    SimpleNode jjtn000 = new SimpleNode(JJTREL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    try {
      acum1 = expr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case LTE:
      case GT:
      case GTE:{
        op_rel();
        expr();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void op_rel() throws ParseException {/*@bgen(jjtree) op_rel */
  SimpleNode jjtn000 = new SimpleNode(JJTOP_REL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        lt();
        break;
        }
      case LTE:{
        lte();
        break;
        }
      case GT:{
        gt();
        break;
        }
      case GTE:{
        gte();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                     jjtree.clearNodeScope(jjtn000);
                     jjtc000 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte000 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte000;}
                   }
                   if (jjte000 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte000;}
                   }
                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  final public SymbolNode expr() throws ParseException {/*@bgen(jjtree) expr */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    SymbolNode acum2 = null;
    try {
      acum1 = term();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          plus();
          acum2 = term();
acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        + (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
          break;
          }
        case MINUS:{
          minus();
          acum2 = term();
acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        - (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode term() throws ParseException {/*@bgen(jjtree) term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    SymbolNode acum2 = null;
    try {
      acum1 = unario();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASTERISK:
        case SLASH:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASTERISK:{
          asterisk();
          acum2 = unario();
          acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        * (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
          break;
          }
        case SLASH:{
          slash();
          acum2 = unario();
acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        / (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode unario() throws ParseException {/*@bgen(jjtree) unario */
    SimpleNode jjtn000 = new SimpleNode(JJTUNARIO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        not();
        unario();
        break;
        }
      case MINUS:{
        minus();
        unario();
        break;
        }
      case LPAREN:
      case TRUE:
      case FALSE:
      case ID:
      case INTEGER:
      case REAL:{
        acum1 = factor();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode factor() throws ParseException {/*@bgen(jjtree) factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SymbolNode acum1 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        lparen();
        exp_bool();
        rparen();
jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      case ID:{
        acum1 = id();
jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      case INTEGER:{
        acum1 = integer();
jjtree.closeNodeScope(jjtn000, true);
                                                                                                jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      case REAL:{
        acum1 = real();
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                               jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      case TRUE:{
        trueToken();
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                             jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      case FALSE:{
        falseToken();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return acum1;}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void lbrace() throws ParseException {/*@bgen(jjtree) lbrace */
  SimpleNode jjtn000 = new SimpleNode(JJTLBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void rbrace() throws ParseException {/*@bgen(jjtree) rbrace */
  SimpleNode jjtn000 = new SimpleNode(JJTRBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RBRACE);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void lbracket() throws ParseException {/*@bgen(jjtree) lbracket */
  SimpleNode jjtn000 = new SimpleNode(JJTLBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void rbracket() throws ParseException {/*@bgen(jjtree) rbracket */
  SimpleNode jjtn000 = new SimpleNode(JJTRBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RBRACKET);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void lparen() throws ParseException {/*@bgen(jjtree) lparen */
  SimpleNode jjtn000 = new SimpleNode(JJTLPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void rparen() throws ParseException {/*@bgen(jjtree) rparen */
  SimpleNode jjtn000 = new SimpleNode(JJTRPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RPAREN);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void semicolon() throws ParseException {/*@bgen(jjtree) semicolon */
  SimpleNode jjtn000 = new SimpleNode(JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void comma() throws ParseException {/*@bgen(jjtree) comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void assign() throws ParseException {/*@bgen(jjtree) assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSIGN);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void or() throws ParseException {/*@bgen(jjtree) or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void and() throws ParseException {/*@bgen(jjtree) and */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void eq() throws ParseException {/*@bgen(jjtree) eq */
  SimpleNode jjtn000 = new SimpleNode(JJTEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQ);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void neq() throws ParseException {/*@bgen(jjtree) neq */
  SimpleNode jjtn000 = new SimpleNode(JJTNEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEQ);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void lt() throws ParseException {/*@bgen(jjtree) lt */
  SimpleNode jjtn000 = new SimpleNode(JJTLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void lte() throws ParseException {/*@bgen(jjtree) lte */
  SimpleNode jjtn000 = new SimpleNode(JJTLTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LTE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void gt() throws ParseException {/*@bgen(jjtree) gt */
  SimpleNode jjtn000 = new SimpleNode(JJTGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GT);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void gte() throws ParseException {/*@bgen(jjtree) gte */
  SimpleNode jjtn000 = new SimpleNode(JJTGTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GTE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void plus() throws ParseException {/*@bgen(jjtree) plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLUS);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void minus() throws ParseException {/*@bgen(jjtree) minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void asterisk() throws ParseException {/*@bgen(jjtree) asterisk */
  SimpleNode jjtn000 = new SimpleNode(JJTASTERISK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASTERISK);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void slash() throws ParseException {/*@bgen(jjtree) slash */
  SimpleNode jjtn000 = new SimpleNode(JJTSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SLASH);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void not() throws ParseException {/*@bgen(jjtree) not */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ifToken() throws ParseException {/*@bgen(jjtree) ifToken */
  SimpleNode jjtn000 = new SimpleNode(JJTIFTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void fi() throws ParseException {/*@bgen(jjtree) fi */
  SimpleNode jjtn000 = new SimpleNode(JJTFI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FI);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void elseToken() throws ParseException {/*@bgen(jjtree) elseToken */
  SimpleNode jjtn000 = new SimpleNode(JJTELSETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void whileToken() throws ParseException {/*@bgen(jjtree) whileToken */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void doToken() throws ParseException {/*@bgen(jjtree) doToken */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void until() throws ParseException {/*@bgen(jjtree) until */
  SimpleNode jjtn000 = new SimpleNode(JJTUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(UNTIL);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void read() throws ParseException {/*@bgen(jjtree) read */
  SimpleNode jjtn000 = new SimpleNode(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(READ);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void write() throws ParseException {/*@bgen(jjtree) write */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void breakToken() throws ParseException {/*@bgen(jjtree) breakToken */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public String intToken() throws ParseException {/*@bgen(jjtree) intToken */
  SimpleNode jjtn000 = new SimpleNode(JJTINTTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
{if ("" != null) return token.image;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public String floatToken() throws ParseException {/*@bgen(jjtree) floatToken */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOATTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FLOAT);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return token.image;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public String boolToken() throws ParseException {/*@bgen(jjtree) boolToken */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOL);
jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
{if ("" != null) return token.image;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void trueToken() throws ParseException {/*@bgen(jjtree) trueToken */
  SimpleNode jjtn000 = new SimpleNode(JJTTRUETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRUE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void falseToken() throws ParseException {/*@bgen(jjtree) falseToken */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FALSE);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void then() throws ParseException {/*@bgen(jjtree) then */
  SimpleNode jjtn000 = new SimpleNode(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THEN);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public SymbolNode id() throws ParseException {/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return SymTable.GetIndex(token.image);}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void idDecl(String type) throws ParseException {/*@bgen(jjtree) idDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTIDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
SymTable.AddIndex(token.image, type);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public String idAssign() throws ParseException {/*@bgen(jjtree) idAssign */
  SimpleNode jjtn000 = new SimpleNode(JJTIDASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return token.image;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode integer() throws ParseException {/*@bgen(jjtree) integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
{if ("" != null) return new SymbolNode("int", Integer.parseInt(token.image));}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymbolNode real() throws ParseException {/*@bgen(jjtree) real */
  SimpleNode jjtn000 = new SimpleNode(JJTREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REAL);
jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
{if ("" != null) return new SymbolNode("float", Double.parseDouble(token.image));}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x90000040,0x0,0x2000,0x90000040,0x40000000,0x8000,0x10000,0x60000,0x60000,0x780000,0x780000,0x1800000,0x1800000,0x6000000,0x6000000,0x9000400,0x400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xe0,0x81d,0xe0,0x0,0x81d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3b00,0x3b00,};
   }

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
