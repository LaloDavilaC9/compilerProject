options{
    IGNORE_CASE = true;
    STATIC = false;
    BUILD_PARSER = true;
    LOOKAHEAD = 1;
}
PARSER_BEGIN(gramatica);
package sintactico;
public clas gramatica{}
PARSER_END(gramatica)

/*Analizador l√©xico*/
//Saltar espacios
SKIP : {
    " " | "\t" | "\r" | "\n"
}

TOKEN : {
  <DIGIT: ["0"-"9"]>
    < PROGRAM : "program" >
    | < LBRACE : "{" >
    | < RBRACE : "}" >
    | < LBRACKET : "[" >
    | < RBRACKET : "]" >
    | < LPAREN : "(" >
    | < RPAREN : ")" >
    | < SEMICOLON : ";" >
    | < COMMA : "," >
    | < ASSIGN : "=" >
    | < OR : "or" >
    | < AND : "and" >
    | < EQ : "==" >
    | < NEQ : "!=" >
    | < LT : "<" >
    | < LTE : "<=" >
    | < GT : ">" >
    | < GTE : ">=" >
    | < PLUS : "+" >
    | < MINUS : "-" >
    | < ASTERISK : "*" >
    | < SLASH : "/" >
    | < NOT : "not" >
    | < IF : "if" >
    | < FI : "fi" >
    | < ELSE : "else" >
    | < WHILE : "while" >
    | < DO : "do" >
    | < UNTIL : "until" >
    | < READ : "read" >
    | < WRITE : "write" >
    | < BREAK : "break" >
    | < INT : "int" >
    | < FLOAT : "float" >
    | < BOOL : "bool" >
    | < ID : (["a"-"z", "A"-"Z"])+ >
    | < INTEGER : (["0"-"9"])+ >
    | < REAL : (["0"-"9"])+ "." (["0"-"9"])* >
    | < TRUE : "true" >
    | < FALSE : "false" >
}

void programa():{}{<PROGRAM> <LBRACE> lista_decl() lista_sent() <RBRACE>}
void epsilon():{}{}
void lista_decl():{}{lista_decl() decl() | decl() | epsilon()}
void decl():{}{tipo() lista_id() <SEMICOLON>}
void tipo():{}{<INT> | <FLOAT> | <BOOL>}
void lista_id():{}{ lista_id() <COMMA> <ID> | <ID> }
void lista_sent():{}{ lista_sent() sent() | sent() | epsilon()}
void sent():{}{sent_if() | sent_while() | sent_do() | sent_read() | sent_write() | bloque() | sent_assign() | <BREAK>}
void sent_if():{}{ <IF> <LPAREN> exp_bool() <RPAREN> bloque() <LBRACKET> <ELSE> bloque() <RBRACKET> <FI> }
void sent_do():{}{ <DO> bloque() <UNTIL> <LPAREN> exp_bool() <RPAREN> <SEMICOLON>}
void sent_read():{}{ <READ> <ID> <SEMICOLON>}
void sent_write():{}{<WRITE> exp_bool() <SEMICOLON>}
void bloque():{}{ <LBRACE> lista_sent() <RBRACE>}
void sent_assign():{}{<ID> <ASSIGN> exp_bool() <SEMICOLON>}
void exp_bool():{}{exp_bool() <OR> comb() | comb() }
void comb():{}{ comb() <AND> igualdad() | igualdad()}
void igualdad():{}{ igualdad() <EQ> rel() | igualdad() <NEQ> rel() | rel()}
void rel():{}{expr() op_rel() expr()}
void op_rel():{}{<LT> | <LTE> | <GT> | <GTE>}
void expr():{}{expr() <MINUS> term() | expr() <PLUS> term() | term()}
void term():{}{term() <ASTERISK> unario() | term() <SLASH> unario() | unario()}
void unario():{}{<NOT> unario() | <MINUS> unario() | factor()}
void factor():{}{<LPAREN> exp_bool <RPAREN> | <ID> | <INTEGER> | <REAL> | <TRUE> | <FALSE>}