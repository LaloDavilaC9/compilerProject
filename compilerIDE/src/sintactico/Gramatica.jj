/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/options{
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
                      
}


PARSER_BEGIN(Gramatica)
package sintactico;
import jflexpackage.*;

public class Gramatica/*@bgen(jjtree)*/implements GramaticaTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTGramaticaState jjtree = new JJTGramaticaState();

/*@egen*/
    public static void main(String [] args) throws ParseException {
        Gramatica analizador = new Gramatica(System.in);
        SimpleNode root = analizador.program();
        //root.dump("");
    }
}

PARSER_END(Gramatica)

/*Analizador l\u00e9xico*/
//Saltar espacios
SKIP : {
    " " | "\t" | "\r" | "\n" 
}

TOKEN : {
    <PROGRAM: "program" >
    | < LBRACE : "{" >
    | < RBRACE : "}" >
    | < LBRACKET : "[" >
    | < RBRACKET : "]" >
    | < LPAREN : "(" >
    | < RPAREN : ")" >
    | < SEMICOLON : ";" >
    | < COMMA : "," >
    | < ASSIGN : "=" >
    | < OR : "or" >
    | < AND : "and" >
    | < EQ : "==" >
    | < NEQ : "!=" >
    | < LT : "<" >
    | < LTE : "<=" >
    | < GT : ">" >
    | < GTE : ">=" >
    | < PLUS : "+" >
    | < MINUS : "-" >
    | < ASTERISK : "*" >
    | < SLASH : "/" >
    | < NOT : "not" >
    | < IF : "if" >
    | < FI : "fi" >
    | < ELSE : "else" >
    | < WHILE : "while" >
    | < DO : "do" >
    | < UNTIL : "until" >
    | < READ : "read" >
    | < WRITE : "write" >
    | < BREAK : "break" >
    | < INT : "int" >
    | < FLOAT : "float" >
    | < BOOL : "bool" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < THEN : "then" >
    | < ID : (["a"-"z", "A"-"Z"])+ >
    | < INTEGER : (["0"-"9"])+ >
    | < REAL : (["0"-"9"])+ "." (["0"-"9"])* > 
    
    
}

// when /* is seen in the DEFAULT state, skip it and switch to the IN_COMMENT state
SKIP : {
  "/*": IN_COMMENT
}

// when any other character is seen in the IN_COMMENT state, skip it.
< IN_COMMENT > SKIP : {
  < ~[] >
}

// when */ is seen in the IN_COMMENT state, skip it and switch back to the DEFAULT state
< IN_COMMENT > SKIP : {
  "*/": DEFAULT
}

SKIP :
{
    <"//" (~["\n"])* "\n">
}

SimpleNode program():{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) program */
try {
/*@egen*/
<PROGRAM> lbrace() ((lista_decl())* (lista_sent())*) rbrace() <EOF>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
    return jjtn000;
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}



void lista_decl():{/*@bgen(jjtree) lista_decl */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) lista_decl */
                     try {
/*@egen*/decl()/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}


void decl():{/*@bgen(jjtree) decl */
    SimpleNode jjtn000 = new SimpleNode(JJTDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type = "";
    //CMTC1
    jjtn000.value = "Declaracion";
}{/*@bgen(jjtree) decl */
    try {
/*@egen*/
    type = tipo() lista_id(type) semicolon()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


String tipo():{/*@bgen(jjtree) tipo */
    SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String type = "";
}{/*@bgen(jjtree) tipo */
    try {
/*@egen*/
    type=intToken()/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {return type;}
    | type=floatToken()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{return type;}  
    | type=boolToken()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{return type;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}


void lista_id(String type):{/*@bgen(jjtree) lista_id */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) lista_id */
    try {
/*@egen*/ 
    idDecl(type) ( comma() idDecl(type) )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}


void lista_sent():{/*@bgen(jjtree) lista_sent */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_SENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) lista_sent */
                      try {
/*@egen*/ sent() ( sent() )*/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ }
void sent():{/*@bgen(jjtree) sent */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) sent */
               try {
/*@egen*/sent_if() | sent_while() | sent_do() | sent_read() | sent_write() | bloque() | sent_assign() | breakToken()/*@bgen(jjtree)*/
               } catch (Throwable jjte000) {
                 if (jjtc000) {
                   jjtree.clearNodeScope(jjtn000);
                   jjtc000 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte000 instanceof RuntimeException) {
                   throw (RuntimeException)jjte000;
                 }
                 if (jjte000 instanceof ParseException) {
                   throw (ParseException)jjte000;
                 }
                 throw (Error)jjte000;
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/}
void sent_if():{/*@bgen(jjtree) sent_if */
    SimpleNode jjtn000 = new SimpleNode(JJTSENT_IF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode tempVar;
}{/*@bgen(jjtree) sent_if */
    try {
/*@egen*/ 
    ifToken() lparen() tempVar=exp_bool(){ SymTable.AddTemporalIndex(tempVar); } rparen() then() bloque() (elseToken() bloque())* fi()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 

}

void sent_while():{/*@bgen(jjtree) sent_while */
    SimpleNode jjtn000 = new SimpleNode(JJTSENT_WHILE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode tempVar;
}{/*@bgen(jjtree) sent_while */
    try {
/*@egen*/
    whileToken() lparen() tempVar=exp_bool(){ SymTable.AddTemporalIndex(tempVar); } rparen() bloque()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void sent_do():{/*@bgen(jjtree) sent_do */
    SimpleNode jjtn000 = new SimpleNode(JJTSENT_DO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode tempVar;
}{/*@bgen(jjtree) sent_do */
    try {
/*@egen*/ 
    doToken() bloque() until() lparen() tempVar=exp_bool(){ SymTable.AddTemporalIndex(tempVar); } rparen() semicolon()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void sent_read():{/*@bgen(jjtree) sent_read */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_READ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) sent_read */
                     try {
/*@egen*/ read() id() semicolon()/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void sent_write():{/*@bgen(jjtree) sent_write */
  SimpleNode jjtn000 = new SimpleNode(JJTSENT_WRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) sent_write */
                     try {
/*@egen*/write() id() semicolon()/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
                     }
/*@egen*/}
void bloque():{/*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) bloque */
                  try {
/*@egen*/ lbrace() lista_sent() rbrace()/*@bgen(jjtree)*/
                  } catch (Throwable jjte000) {
                    if (jjtc000) {
                      jjtree.clearNodeScope(jjtn000);
                      jjtc000 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte000 instanceof RuntimeException) {
                      throw (RuntimeException)jjte000;
                    }
                    if (jjte000 instanceof ParseException) {
                      throw (ParseException)jjte000;
                    }
                    throw (Error)jjte000;
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}


void sent_assign():{/*@bgen(jjtree) sent_assign */
    SimpleNode jjtn000 = new SimpleNode(JJTSENT_ASSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String identifier="";
    SymbolNode tempVar = null;
    jjtn000.value = "Asignacion";
}{/*@bgen(jjtree) sent_assign */
    try {
/*@egen*/
    identifier=idAssign() assign() tempVar=exp_bool() semicolon() (/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/{
        if(SymTable.Contains(identifier)){
            SymbolNode id = SymTable.GetIndex(identifier);
            if((id.type == tempVar.type) || (id.type =="float" && (tempVar.type == "float" || tempVar.type=="int"))){
                SymTable.UpdateIndex(identifier, tempVar);
                if(id.type =="float" && tempVar.type=="int"){
                    IDE.errores += "Warning: P\u00e9rdida de precisi\u00f3n. \n";
                }
            }else {//error, tipos de datos diferentes
                IDE.errores += "Error: El tipo de dato no es compatible. \n";
            }
        }else{IDE.errores += "Error: Var no declarada \n";} //error, variable no declarada
    })/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SymbolNode exp_bool():{/*@bgen(jjtree) exp_bool */
    SimpleNode jjtn000 = new SimpleNode(JJTEXP_BOOL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1;
    SymbolNode acum2;
    SymbolNode acum3 = new SymbolNode("",null);
}{/*@bgen(jjtree) exp_bool */
    try {
/*@egen*/ 
    acum1=comb() ( or() acum2=comb(){
                    acum3.value = ((Boolean) acum1.value).booleanValue() || ((Boolean) acum2.value).booleanValue() ? true : false;
                    acum3.type="bool";
                    return acum3;
                 } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SymbolNode comb():{/*@bgen(jjtree) comb */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMB);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1;
    SymbolNode acum2;
    SymbolNode acum3 = new SymbolNode("",null);
}{/*@bgen(jjtree) comb */
    try {
/*@egen*/ 
    acum1=igualdad() ( and() acum2=igualdad(){
                      acum3.value = ((Boolean) acum1.value).booleanValue() && ((Boolean) acum2.value).booleanValue() ? true : false; 
                      acum3.type="bool";
                      return acum3;
                     } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SymbolNode igualdad():{/*@bgen(jjtree) igualdad */
    SimpleNode jjtn000 = new SimpleNode(JJTIGUALDAD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1;
    SymbolNode acum2;
    SymbolNode acum3 = new SymbolNode("",null);
    String op = "";
}{/*@bgen(jjtree) igualdad */
    try {
/*@egen*/ 
    acum1=rel() ( ( op=eq() | op=neq() ) acum2=rel(){
                    double numericValue1 = 0.0;
                    double numericValue2 = 0.0;

                    if (acum1.value instanceof Integer) {
                        numericValue1 = (int) acum1.value;
                    } else if (acum1.value instanceof Double) {
                        numericValue1 = (double) acum1.value;
                    }else numericValue1 = ((Boolean) acum1.value).booleanValue() == true ? 1 : 0;

                    if (acum2.value instanceof Integer) {
                        numericValue2 = (int) acum2.value;
                    } else if (acum2.value instanceof Double) {
                        numericValue2 = (double) acum2.value;
                    }else numericValue2 = ((Boolean) acum2.value).booleanValue() == true ? 1 : 0;

                    switch(op) {
                        case "==":
                            acum3.value = numericValue1 == numericValue2;
                            break;
                        case "!=":
                            acum3.value = numericValue1 != numericValue2;
                            break;
                    }
                    acum3.type = "bool";
                    return acum3;
                } )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SymbolNode rel():{/*@bgen(jjtree) rel */
    SimpleNode jjtn000 = new SimpleNode(JJTREL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1;
    SymbolNode acum2;
    SymbolNode acum3 = new SymbolNode("", null);
    String op = "";
}{/*@bgen(jjtree) rel */
    try {
/*@egen*/ 
    acum1=expr() [op=op_rel() acum2=expr(){
                    double numericValue1 = 0.0;
                    double numericValue2 = 0.0;

                    if (acum1.value instanceof Integer) {
                        numericValue1 = (int) acum1.value;
                    } else if (acum1.value instanceof Double) {
                        numericValue1 = (double) acum1.value;
                    }

                    if (acum2.value instanceof Integer) {
                        numericValue2 = (int) acum2.value;
                    } else if (acum2.value instanceof Double) {
                        numericValue2 = (double) acum2.value;
                    }

                    switch(op) {
                        case "<":
                            acum3.value = numericValue1 < numericValue2;
                            break;
                        case "<=":
                            acum3.value = numericValue1 <= numericValue2;
                            break;
                        case ">":
                            acum3.value = numericValue1 > numericValue2;
                            break;
                        case ">=":
                            acum3.value = numericValue1 >= numericValue2;
                            break;
                    }
                    acum3.type="bool";
                    return acum3;
                 }]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String op_rel():{/*@bgen(jjtree) op_rel */
    SimpleNode jjtn000 = new SimpleNode(JJTOP_REL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String op ="";
}{/*@bgen(jjtree) op_rel */
  try {
/*@egen*/op=lt()/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/{return op;} | op=lte()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{return op;} | op=gt()/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                      }
/*@egen*/{return op;} | op=gte()/*@bgen(jjtree)*/
                                                                             {
                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                               jjtc000 = false;
                                                                             }
/*@egen*/{return op;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}



SymbolNode expr():{/*@bgen(jjtree) expr */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1 = null;
    SymbolNode acum2 = null;
}{/*@bgen(jjtree) expr */
    try {
/*@egen*/ 
    acum1=term() ( ( plus() acum2=term() {
                        acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        + (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
                    } )
                | ( minus() acum2=term(){
                        acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        - (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());
                        
                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
                 } ) 
                 )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}


SymbolNode term():{/*@bgen(jjtree) term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1 = null;
    SymbolNode acum2 = null;
}{/*@bgen(jjtree) term */
    try {
/*@egen*/ 
    acum1=unario() ( ( asterisk() acum2=unario(){
                        acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        * (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
                    }) 
                    | (slash() acum2=unario(){
                        acum1.value = (acum1.type == "float" ? ((Number) acum1.value).doubleValue() : ((Number) acum1.value).intValue())
                        / (acum2.type == "float" ? ((Number) acum2.value).doubleValue() : ((Number) acum2.value).intValue());

                        if(acum1.type == "float" || acum2.type == "float") acum1.type = "float";
                        else acum1.type = "int";
                    })  
                   )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SymbolNode unario():{/*@bgen(jjtree) unario */
    SimpleNode jjtn000 = new SimpleNode(JJTUNARIO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1 = null;
}{/*@bgen(jjtree) unario */
    try {
/*@egen*/
    not() unario() | minus() unario() | acum1=factor()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


SymbolNode factor():{/*@bgen(jjtree) factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SymbolNode acum1 = null;
}{/*@bgen(jjtree) factor */
    try {
/*@egen*/
    lparen() exp_bool() rparen()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {return acum1;}| acum1=id()/*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                             }
/*@egen*/ {return acum1;}| acum1=integer()/*@bgen(jjtree)*/
                                                                                              {
                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                jjtc000 = false;
                                                                                              }
/*@egen*/ {return acum1;} | acum1=real()/*@bgen(jjtree)*/
                                                                                                                             {
                                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                                               jjtc000 = false;
                                                                                                                             }
/*@egen*/ {return acum1;} | acum1=trueToken()/*@bgen(jjtree)*/
                                                                                                                                                                 {
                                                                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                   jjtc000 = false;
                                                                                                                                                                 }
/*@egen*/ {return acum1;} | acum1=falseToken()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return acum1;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void lbrace():{/*@bgen(jjtree) lbrace */
  SimpleNode jjtn000 = new SimpleNode(JJTLBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) lbrace */
    try {
/*@egen*/
    <LBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="{";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


public void rbrace():{/*@bgen(jjtree) rbrace */
  SimpleNode jjtn000 = new SimpleNode(JJTRBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) rbrace */
    try {
/*@egen*/
    <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="}";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void lbracket():{/*@bgen(jjtree) lbracket */
  SimpleNode jjtn000 = new SimpleNode(JJTLBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) lbracket */
    try {
/*@egen*/
    <LBRACKET>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="[";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void rbracket():{/*@bgen(jjtree) rbracket */
  SimpleNode jjtn000 = new SimpleNode(JJTRBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) rbracket */
    try {
/*@egen*/
    <RBRACKET>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="]";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void lparen():{/*@bgen(jjtree) lparen */
  SimpleNode jjtn000 = new SimpleNode(JJTLPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) lparen */
    try {
/*@egen*/
    <LPAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="(";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void rparen():{/*@bgen(jjtree) rparen */
  SimpleNode jjtn000 = new SimpleNode(JJTRPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) rparen */
    try {
/*@egen*/
    <RPAREN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value=")";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void semicolon():{/*@bgen(jjtree) semicolon */
  SimpleNode jjtn000 = new SimpleNode(JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) semicolon */
    try {
/*@egen*/
    <SEMICOLON>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value=";";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void comma():{/*@bgen(jjtree) comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) comma */
    try {
/*@egen*/
    <COMMA>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value=",";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void assign():{/*@bgen(jjtree) assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) assign */
    try {
/*@egen*/
    <ASSIGN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="=";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void or():{/*@bgen(jjtree) or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) or */
    try {
/*@egen*/
    <OR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="or";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void and():{/*@bgen(jjtree) and */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) and */
    try {
/*@egen*/
    <AND>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="and";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String eq():{/*@bgen(jjtree) eq */
  SimpleNode jjtn000 = new SimpleNode(JJTEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) eq */
    try {
/*@egen*/
    <EQ>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="==";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String neq():{/*@bgen(jjtree) neq */
  SimpleNode jjtn000 = new SimpleNode(JJTNEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) neq */
    try {
/*@egen*/
    <NEQ>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="!=";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String lt():{/*@bgen(jjtree) lt */
  SimpleNode jjtn000 = new SimpleNode(JJTLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) lt */
    try {
/*@egen*/
    <LT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="<";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String lte():{/*@bgen(jjtree) lte */
  SimpleNode jjtn000 = new SimpleNode(JJTLTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) lte */
    try {
/*@egen*/
    <LTE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="<=";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String gt():{/*@bgen(jjtree) gt */
  SimpleNode jjtn000 = new SimpleNode(JJTGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) gt */
    try {
/*@egen*/
    <GT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value=">";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String gte():{/*@bgen(jjtree) gte */
  SimpleNode jjtn000 = new SimpleNode(JJTGTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) gte */
    try {
/*@egen*/
    <GTE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value=">=";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void plus():{/*@bgen(jjtree) plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) plus */
    try {
/*@egen*/
    <PLUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="+";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void minus():{/*@bgen(jjtree) minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) minus */
    try {
/*@egen*/
    <MINUS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="-";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void asterisk():{/*@bgen(jjtree) asterisk */
  SimpleNode jjtn000 = new SimpleNode(JJTASTERISK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) asterisk */
    try {
/*@egen*/
    <ASTERISK>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="*";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void slash():{/*@bgen(jjtree) slash */
  SimpleNode jjtn000 = new SimpleNode(JJTSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) slash */
    try {
/*@egen*/
    <SLASH>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="/";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void not():{/*@bgen(jjtree) not */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) not */
    try {
/*@egen*/
    <NOT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="not";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void ifToken():{/*@bgen(jjtree) ifToken */
  SimpleNode jjtn000 = new SimpleNode(JJTIFTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ifToken */
    try {
/*@egen*/
    <IF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="if";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void fi():{/*@bgen(jjtree) fi */
  SimpleNode jjtn000 = new SimpleNode(JJTFI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) fi */
    try {
/*@egen*/
    <FI>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="fi";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void elseToken():{/*@bgen(jjtree) elseToken */
  SimpleNode jjtn000 = new SimpleNode(JJTELSETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) elseToken */
    try {
/*@egen*/
    <ELSE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="else";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void whileToken():{/*@bgen(jjtree) whileToken */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) whileToken */
    try {
/*@egen*/
    <WHILE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="while";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void doToken():{/*@bgen(jjtree) doToken */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) doToken */
    try {
/*@egen*/
    <DO>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="do";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void until():{/*@bgen(jjtree) until */
  SimpleNode jjtn000 = new SimpleNode(JJTUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) until */
    try {
/*@egen*/
    <UNTIL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="until";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void read():{/*@bgen(jjtree) read */
  SimpleNode jjtn000 = new SimpleNode(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) read */
    try {
/*@egen*/
    <READ>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="read";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void write():{/*@bgen(jjtree) write */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) write */
    try {
/*@egen*/
    <WRITE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="write";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void breakToken():{/*@bgen(jjtree) breakToken */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) breakToken */
    try {
/*@egen*/
    <BREAK>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="break";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String intToken():{/*@bgen(jjtree) intToken */
  SimpleNode jjtn000 = new SimpleNode(JJTINTTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) intToken */
    try {
/*@egen*/
    <INT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="int";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String floatToken():{/*@bgen(jjtree) floatToken */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOATTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) floatToken */
    try {
/*@egen*/
    <FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="float";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String boolToken():{/*@bgen(jjtree) boolToken */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLTOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) boolToken */
    try {
/*@egen*/
    <BOOL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="bool";
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public SymbolNode trueToken():{/*@bgen(jjtree) trueToken */
  SimpleNode jjtn000 = new SimpleNode(JJTTRUETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) trueToken */
    try {
/*@egen*/
    <TRUE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="true";
        return new SymbolNode("bool", true);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public SymbolNode falseToken():{/*@bgen(jjtree) falseToken */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSETOKEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) falseToken */
    try {
/*@egen*/
    <FALSE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="false";
        return new SymbolNode("bool", false);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void then():{/*@bgen(jjtree) then */
  SimpleNode jjtn000 = new SimpleNode(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) then */
    try {
/*@egen*/
    <THEN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="then";
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public SymbolNode id():{/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) id */
    try {
/*@egen*/
    <ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="" + token.image;
        return SymTable.GetIndex(token.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public void idDecl(String type):{/*@bgen(jjtree) idDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTIDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) idDecl */
    try {
/*@egen*/
    <ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="" + token.image;
        SymTable.AddIndex(token.image, type);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public String idAssign():{/*@bgen(jjtree) idAssign */
  SimpleNode jjtn000 = new SimpleNode(JJTIDASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) idAssign */
    try {
/*@egen*/
    <ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="" + token.image;
        return token.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public SymbolNode integer():{/*@bgen(jjtree) integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) integer */
    try {
/*@egen*/
    <INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.value="" + token.image;
        return new SymbolNode("int", Integer.parseInt(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

public SymbolNode real():{/*@bgen(jjtree) real */
  SimpleNode jjtn000 = new SimpleNode(JJTREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) real */
    try {
/*@egen*/
    <REAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.value="" + token.image;
        return new SymbolNode("float", Double.parseDouble(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}